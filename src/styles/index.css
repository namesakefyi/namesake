@import "tailwindcss";
@import "tw-animate-css";
@import "./colors.css";

@plugin "tailwindcss-react-aria-components";

@custom-variant dark (&:where(.dark, .dark *));

.app-padding {
  @apply px-4 md:px-6 lg:px-8;
}

.h-header {
  @apply h-16 lg:h-20;
}

.h-mobile-nav {
  height: calc(56px + env(safe-area-inset-bottom));
  padding-bottom: max(env(safe-area-inset-bottom), 0.25rem);
}

.prose {
  @apply text-base lg:text-lg;

  a:not([data-type="button"]):not(:where(.not-prose *)) {
    @apply underline underline-offset-2 hover:decoration-inherit;
  }

  :where(p, h2, h3, blockquote, ul, ol, img, div) + :where(p, h2, h3, blockquote, ul, ol, img, div):not(:where(.not-prose *)) {
    margin-block-start: 0.75em;
  }

  h2:not(:where(.not-prose *)) {
    @apply text-2xl font-medium;
    @apply pb-2;
    @apply border-b border-gray-6;
  }

  h3:not(:where(.not-prose *)) {
    @apply text-xl font-medium;
  }

  blockquote:not(:where(.not-prose *)) {
    @apply border-l-2 border-gray-9 pl-4;
  }

  li:not(:where(.not-prose *)) {
    margin-block: 0;
    padding-inline-start: 1.5em;
    position: relative;
  }

  ul:not(:where(.not-prose *)),
  ol:not(:where(.not-prose *)) {
    list-style: none;
  }

  li:not(:where(.not-prose *)) {
    &::before {
      position: absolute;
      left: 0;
      @apply tabular-nums text-gray-11;
    }
  }

  ul > li:not(:where(.not-prose *))::before {
    content: "â€¢";
    margin-inline-start: 0.25em;
    scale: 1.3;
    translate: 0 -0.05em;
  }

  ol:not([data-type="steps"]):not(:where(.not-prose *)) {
    counter-reset: list;
  }

  ol:not([data-type="steps"]) > li:not(:where(.not-prose *))::before {
    counter-increment: list;
    content: counter(list) ".";
    text-align: right;
    width: 1.5em;
    margin-inline-start: -0.5em;
  }

  ol:not([data-type="steps"]) ol > li:not(:where(.not-prose *))::before {
    content: counter(list, lower-alpha) ".";
  }

  ul:not([data-type="steps"]) ul:not(:where(.not-prose *)),
  ul:not([data-type="steps"]) ol:not(:where(.not-prose *)),
  ol:not([data-type="steps"]) ul:not(:where(.not-prose *)),
  ol:not([data-type="steps"]) ol:not(:where(.not-prose *)) {
    margin-block: 0;
  }

  ol[data-type="steps"]:not(:where(.not-prose *)) {
    counter-reset: steps;
    @apply flex flex-col;

    &:not(:first-child) {
      @apply mt-6;
    }
  }

  li[data-type="step-item"]:not(:where(.not-prose *)) {
    padding: 0;
    counter-increment: steps;
    display: grid;
    column-gap: 1rem;
    grid-template-columns: 32px 1fr;
    grid-template-rows: auto 1fr;
    grid-template-areas:
      "number title"
      "line content";
    
    &::before {
      all: unset;
      width: 100%;
      aspect-ratio: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      grid-area: number;
      content: counter(steps);
      @apply bg-gray-a4;
    }
    
    &::after {
      grid-area: line;
      width: 2px;
      height: 100%;
      margin-inline: auto;
      @apply bg-gray-a3;
      content: "";
    }
    
    &:last-child::after {
      @apply invisible;
    }

    &:last-child div[data-type="step-content"] {
      padding-bottom: 0.75rem;
    }
  }

  div[data-type="step-title"]:not(:where(.not-prose *)) {
    grid-area: title;
    @apply text-2xl font-medium;
    
    &.is-empty::before {
      content: attr(data-placeholder);
      @apply text-gray-9;
      float: left;
      height: 0;
      pointer-events: none;
    }
  }

  div[data-type="step-content"] {
    grid-area: content;
    padding-block-end: 1.5rem;

    &.is-empty::before {
      content: attr(data-placeholder);
      @apply text-gray-9;
      float: left;
      height: 0;
      pointer-events: none;
    }
  }
}

.tiptap {
  &.is-empty :not([data-type="step-content"]) p:first-child::before {
    @apply text-gray-9;
    content: attr(data-placeholder);
    float: left;
    height: 0;
    pointer-events: none;
  }
}

/* Scale up hit targets on high resolution mobile devices. */
@media (min-resolution: 200dpi) {
  html {
    font-size: 18px;
  }

  .text-sm {
    /* ensure minimum font size of 16px */
    font-size: 0.9rem;
  }
}

body {
  color-scheme: dark light;
  -webkit-font-smoothing: antialiased;
  @apply bg-gray-1 dark:bg-gray-2 text-gray-12;
}

body,
#root {
  min-height: 100dvh;
}

::selection {
  @apply bg-amber-5 text-gray-12;
}

.dark ::selection {
  @apply bg-purple-5 text-gray-12;
}

.svc-full-creator {
  flex: 1;
}

.tippy-box {
  transition: 0.25s ease;
  transition-property: opacity, transform, scale;

  &[data-state="hidden"] {
    opacity: 0;
    scale: 0.96;

    &[data-placement^="top"] {
      transform: translateY(10px);
      transform-origin: bottom;
    }

    &[data-placement^="bottom"] {
      transform: translateY(-10px);
      transform-origin: top;
    }

    &[data-placement^="left"] {
      transform: translateX(10px);
      transform-origin: right;
    }

    &[data-placement^="right"] {
      transform: translateX(-10px);
      transform-origin: left;
    }
  }

  &[data-state="visible"] {
    opacity: 1;
    transition-timing-function: cubic-bezier(0.54, 1.5, 0.38, 1.11);
  }
}

@keyframes animate-focus-ring-in {
  from {
    outline-color: transparent;
    outline-width: 16px;
  }

  to {
    outline-color: var(--color-purple-a9);
    outline-width: 3px;
  }
}

.sticky-top-header {
  @apply sticky top-16 lg:top-20;
}

.animate-focus-ring-in {
  animation: animate-focus-ring-in 300ms ease forwards;

  &:has(button[data-focus-visible]) {
    animation: none;
  }
}

.disable-native-autofill:-webkit-autofill,
.disable-native-autofill:autofill {
  /* The background color itself can't be overridden, so we use a hack to disable it.
  https://css-tricks.com/snippets/css/change-autocomplete-styles-webkit-browsers/ */

  /* Set transition delay to the max possible integer in CSS (68.24 years)
  https://stackoverflow.com/questions/37861312/what-is-the-maximum-value-of-a-css-transitions-duration */
  transition-property: background-color, color;
  transition-duration: 0s;
  transition-delay: 2147483647s;
  transition-timing-function: linear;
  background-color: transparent !important;
  -webkit-text-fill-color: inherit;
}
